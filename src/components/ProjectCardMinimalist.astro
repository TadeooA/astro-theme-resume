---
interface ProjectProps {
  name: string;
  description: string;
  url: string;
  image: string;
  tags?: string[];
  metrics?: string[];
}

const { 
  name, 
  description, 
  url, 
  image, 
  tags = [], 
  metrics = [] 
} = Astro.props as ProjectProps;
---

<a
  href={url}
  target="_blank"
  rel="noopener noreferrer"
  class="relative flex flex-col items-stretch duration-300 ease-out p-7 sm:p-3 group h-100 rounded-2xl border-2 border-dashed"
>
  <!-- Efectos de hover -->
  <span
    class="absolute inset-0 z-20 block w-full h-full duration-300 ease-out bg-transparent border border-transparent border-dashed group-hover:-translate-x-1 group-hover:-translate-y-1 group-hover:border group-hover:border-neutral-300 dark:group-hover:border-neutral-600 group-hover:border-dashed rounded-2xl group-hover:bg-white/80 dark:group-hover:bg-neutral-950/80 backdrop-blur-sm"
  ></span>
  <span
    class="absolute inset-0 z-10 block w-full h-full duration-300 ease-out border border-dashed rounded-2xl border-neutral-300 dark:border-neutral-600 group-hover:translate-x-1 group-hover:translate-y-1"
  ></span>

  <!-- Contenido principal -->
  <span class="relative z-30 block duration-300 ease-out group-hover:-translate-x-1 group-hover:-translate-y-1">
    <!-- Imagen del proyecto -->
    <span class="block w-full relative">
      <img 
        src={image} 
        alt={`Screenshot del proyecto ${name}`} 
        class="w-full h-auto rounded-xl aspect-[16/9] object-cover"
        loading="lazy"
      />
      {tags.length > 0 && (
        <span class="absolute bottom-2 left-2 flex flex-wrap gap-1">
          {tags.slice(0, 3).map(tag => (
            <span class="text-xs px-2 py-1 bg-white/90 dark:bg-neutral-800/90 rounded-full backdrop-blur-sm">
              {tag}
            </span>
          ))}
        </span>
      )}
    </span>

    <!-- Texto descriptivo -->
    <span class="block w-full px-1 mt-5 mb-1 sm:mt-3 space-y-2">
      <span class="flex items-center justify-between">
        <span class="text-base font-semibold tracking-tight text-neutral-900 dark:text-neutral-100 line-clamp-2">
          {name}
          <svg
            class="inline-block group-hover:translate-x-0 group-hover:translate-y-0 -rotate-45 translate-y-1 -translate-x-1 w-2.5 h-2.5 stroke-current ml-1 transition-all ease-in-out duration-200 transform"
            viewBox="0 0 13 15"
            aria-hidden="true"
          >
            <g stroke="none" stroke-width="1" fill="none" stroke-linecap="round" stroke-linejoin="round">
              <g transform="translate(0.666667, 2.333333)" stroke="currentColor" stroke-width="2.4">
                <polyline
                  class="transition-all duration-200 ease-out opacity-0 delay-0 group-hover:opacity-100"
                  points="5.33333333 0 10.8333333 5.5 5.33333333 11"
                />
                <line
                  class="transition-all duration-200 ease-out transform -translate-x-1 opacity-0 group-hover:translate-x-0 group-hover:opacity-100 group-hover:ml-0"
                  x1="10.8333333" y1="5.5" x2="0.833333333" y2="5.16666667"
                />
              </g>
            </g>
          </svg>
        </span>
      </span>

      <span class="text-sm text-neutral-600 dark:text-neutral-400 block line-clamp-3">
        {description}
      </span>

      {metrics.length > 0 && (
        <ul class="mt-2 space-y-1">
          {metrics.slice(0, 2).map(metric => (
            <li class="text-xs text-neutral-500 dark:text-neutral-400 flex items-start">
              <span class="text-emerald-500 mr-1">âœ“</span> {metric}
            </li>
          ))}
        </ul>
      )}
    </span>
  </span>
</a>

<style>
  .line-clamp-1 {
    display: -webkit-box;
    -webkit-line-clamp: 1;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>